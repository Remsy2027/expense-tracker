version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expenseflow_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: expenseflow
      POSTGRES_USER: expenseflow_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${DATA_PATH}/postgres:/var/lib/postgresql/data/pgdata
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - expenseflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U expenseflow_user -d expenseflow"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: expenseflow_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${DATA_PATH}/redis:/data
    ports:
      - "6379:6379"
    networks:
      - expenseflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: expenseflow_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://expenseflow_user:${DB_PASSWORD}@postgres:5432/expenseflow
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CORS_ORIGIN: ${FRONTEND_URL}
      MAX_FILE_SIZE: 10485760
      UPLOAD_DIR: /app/uploads
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@expenseflow.local}
    volumes:
      - ${DATA_PATH}/uploads:/app/uploads
      - ${DATA_PATH}/logs/backend:/app/logs
      - ${DATA_PATH}/backups:/app/backups
    ports:
      - "3001:3001"
    networks:
      - expenseflow_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_APP_NAME: ExpenseFlow
        REACT_APP_VERSION: 1.0.0
        REACT_APP_ENVIRONMENT: production
    container_name: expenseflow_frontend
    restart: unless-stopped
    volumes:
      - ${DATA_PATH}/logs/frontend:/var/log/nginx
    networks:
      - expenseflow_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: expenseflow_nginx
    restart: unless-stopped
    ports:
      - "${HOST_PORT:-3000}:80"
      - "${HOST_SSL_PORT:-3443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ${DATA_PATH}/ssl:/etc/nginx/ssl:ro
      - ${DATA_PATH}/logs/nginx:/var/log/nginx
    networks:
      - expenseflow_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: expenseflow_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ${DATA_PATH}/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - expenseflow_network
    depends_on:
      - postgres
    profiles:
      - backup
    command: ["/backup.sh"]

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: expenseflow_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${DATA_PATH}/prometheus:/prometheus
    networks:
      - expenseflow_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: expenseflow_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ${DATA_PATH}/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - expenseflow_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: expenseflow_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - ${DATA_PATH}/loki:/loki
    networks:
      - expenseflow_network
    profiles:
      - monitoring

networks:
  expenseflow_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local